future <- make_future_dataframe(m, periods = 365)
forecast <- predict(m, future)
#plot(forecast$yhat)
plot(m, forecast) +
ggtitle('Daily prediction') +
xlab('Date') +
ylab('Sales')
m
# Daily analysis
df_prophet_dayly_train <- df_daily %>% filter (date < "2017-01-01")
View(df_prophet_dayly_test)
View(df_prophet_dayly_train)
m <- prophet(df_prophet_dayly_train)
# Daily analysis
df_prophet_dayly_train <- df_daily %>% filter (date < "2017-01-01")
df_prophet_dayly_test <- df_daily %>% filter (date >= "2017-01-01")
colnames(df_prophet_dayly_train) <- c('ds','y')
colnames(df_prophet_dayly_test) <- c('ds','y')
m <- prophet(df_prophet_dayly_train)
future <- make_future_dataframe(m, periods = 365)
forecast <- predict(m, future)
#plot(forecast$yhat)
plot(m, forecast) +
ggtitle('Daily prediction') +
xlab('Date') +
ylab('Sales')
forecast$yhat
length(forecast$yhat)
nrow(df_prophet_dayly_test)
forecast
nrow(forecast)
future <- make_future_dataframe(m, periods = 365,freq = 'day')
forecast <- predict(m, future)
forecast
nrow(forecast)
accuracy(forecast,df_daily)
prophet_daily_error <- forecast$yhat[forecast$ds >= "2017-01-01"]
forecast$yhat[forecast$ds >= "2017-01-01"]
prophet_daily_error <- abs(forecast$yhat[forecast$ds >= "2017-01-01"] - df_prophet_dayly_test$y) / df_prophet_dayly_test * 100
df_prophet_dayly_test$y
forecast$yhat[forecast$ds >= "2017-01-01"] - df_prophet_dayly_test$y
abs(forecast$yhat[forecast$ds >= "2017-01-01"] - df_prophet_dayly_test$y)
abs(forecast$yhat[forecast$ds >= "2017-01-01"] - df_prophet_dayly_test$y) / df_prophet_dayly_test
prophet_daily_error <- abs(forecast$yhat[forecast$ds >= "2017-01-01"] - df_prophet_dayly_test$y) / df_prophet_dayly_test$y * 100
mean(prophet_daily_error)
m <- prophet(df_prophet_dayly_train,daily.seasonality = TRUE)
future <- make_future_dataframe(m, periods = 365,freq = 'day')
forecast <- predict(m, future)
MAPE_prophet_daily <- abs(forecast$yhat[forecast$ds >= "2017-01-01"] - df_prophet_dayly_test$y) / df_prophet_dayly_test$y * 100
MAPE_prophet_daily
MAPE_prophet_daily <- mean(abs(forecast$yhat[forecast$ds >= "2017-01-01"] - df_prophet_dayly_test$y) / df_prophet_dayly_test$y * 100)
MAPE_prophet_daily
View(df_daily)
# Daily forecasting for 2018
df_prophet_dayly <- df_daily
colnames(df_prophet_dayly) <- c('ds','y')
m <- prophet(df_prophet_dayly,daily.seasonality = TRUE)
future <- make_future_dataframe(m, periods = 90,freq = 'day')
forecast <- predict(m, future)
#plot(forecast$yhat)
plot(m, forecast) +
ggtitle('Daily prediction') +
xlab('Date') +
ylab('Sales')
forecast
# Forecast for the 90 days of the total sales
forecast90 <- forecast$y[forecast$ds >= "2018-01-01"]
forecast90
# Forecast for the 90 days of the total sales
forecast90 <- forecast$y[,forecast$ds >= "2018-01-01"]
forecast90
forecast$ds >= "2018-01-01"
# Forecast for the 90 days of the total sales
forecast90 <- forecast$y[forecast$ds >= "2017-01-01"]
forecast90
# Forecast for the 90 days of the total sales
forecast90 <- forecast$yhat[forecast$ds >= "2017-01-01"]
forecast90
# Forecast for the 90 days of the total sales
forecast90 <- forecast$yhat[forecast$ds >= "2018-01-01"]
forecast90
percentage_list.names <- unique(df$store)
percentage_list <- vector("list", length(percentage_list.names))
names(percentage_list) <- percentage_list.names
percentage_list
for (i in unique(df$item)){
print(i)
}
for (i in unique(df$item)){
percentage_list[[i]].names <- unique(df$items)
percentage_list[[i]] <- vector("list", length(percentage_list[[i]].names))
names(percentage_list[[i]]) <- percentage_list[[i]].names
}
for (i in unique(df$item)){
percentage_list[[i]].names <- unique(df$items)
percentage_list[[i]] <- vector("list", length(unique(df$items)))
names(percentage_list[[i]]) <- percentage_list[[i]].names
}
percentage_list[[1]].names <- unique(df$items)
for (i in unique(df$item)){
percentage_list[[i]] <- vector("list", length(unique(df$items)))
names(percentage_list[[i]]) <- inner_percentge_list.names
}
inner_percentge_list.names <- unique(df$items)
for (i in unique(df$item)){
percentage_list[[i]] <- vector("list", length(unique(df$items)))
names(percentage_list[[i]]) <- inner_percentge_list.names
}
percentage_list
percentage_list[[1]] <- vector("list", length(unique(df$items)))
percentage_list
percentage_list.names <- unique(df$store)
percentage_list <- vector("list", length(percentage_list.names))
names(percentage_list) <- percentage_list.names
inner_percentge_list.names <- unique(df$items)
percentage_list
inner_percentge_list.names <- unique(df$items)
percentage_list[[1]] <- vector("list", length(unique(df$items)))
percentage_list
names(percentage_list[[1]]) <- inner_percentge_list.names
percentage_list
inner_percentge_list.names
percentage_list.names
inner_percentge_list.names <- unique(df$items)
inner_percentge_list.names
unique(df$items)
unique(df$item)
inner_percentge_list.names <- unique(df$item)
for (i in unique(df$item)){
percentage_list[[i]] <- vector("list", length(unique(df$item)))
names(percentage_list[[i]]) <- inner_percentge_list.names
}
percentage_list
?split
df
as_data_frame(df)
as_data_frame(split(df,by=c('store','item')))
install.packages("data.table")
install.packages("data.table")
library(data.table)
as_data_frame(split(df,by=c('store','item')))
as_data_frame(split(df,by=c('store','item'),keep.by= FALSE))
split(df,by=c('store','item'),keep.by= FALSE)
data.table::split(df,by=c('store','item'),keep.by=FALSE)
?split
as.data.table(df)
split(as.data.table(df),by=c('store','item'))
a <- split(as.data.table(df),by=c('store','item'))
View(a)
df_split <- split(as.data.table(df),by=c('store','item'),keep.by = FALSE)
View(df_split)
df_split <- split(as.data.table(df),by=c('store','item'))
View(df_split)
View(df_results)
df_split[["1.1"]]
df
as_data_frame(df_train)
df_split <- split(as.data.table(df_train),by=c('store','item'),keep.by = FALSE)
View(df_split)
df_prophet_to_split <- df
df_prophet_to_split$date <- as.POSIXct(df_prophet_to_split$date, "%Y-%m-%d")
df_split <- split(as.data.table(df_prophet_to_split),by=c('store','item'),keep.by = FALSE)
View(df_split)
df_prophet_to_split <- df_train
df_prophet_to_split$date <- as.POSIXct(df_prophet_to_split$date, "%Y-%m-%d")
df_split <- split(as.data.table(df_prophet_to_split),by=c('store','item'),keep.by = FALSE)
View(df_split)
names(df)
df_prophet_to_split <- df_train
df_prophet_to_split$date <- as.POSIXct(df_prophet_to_split$date, "%Y-%m-%d")
names(df_prophet_to_split) <- c('ds','y')
df_split <- split(as.data.table(df_prophet_to_split),by=c('store','item'),keep.by = FALSE)
names(df_prophet_to_split)
df_prophet_to_split <- df_train
names(df_prophet_to_split)
df_prophet_to_split$date <- as.POSIXct(df_prophet_to_split$date, "%Y-%m-%d")
names(df_prophet_to_split) <- c('ds','store','item','y')
df_split <- split(as.data.table(df_prophet_to_split),by=c('store','item'),keep.by = FALSE)
makepredictions <- function(df_prophet)
{
m <- prophet(df_prophet, daily.seasonality=TRUE)
future <- make_future_dataframe(m, periods=90)
forecast <- predict(m, future)
xts::last(forecast[, c("yhat")],90)
}
prediction <- sapply(df_split,makepredictions)
df_split
str(df_split)
df_split[[1]]
df_split[[1:3]]
df_split[[c(1,2,3)]]
df_split[[c(1,2)]]
df_split[[1]]
df_split[1]
df_split[1:3]
prediction <- sapply(df_split[1:3],makepredictions)
prediction
class(prediction)
View(prediction)
prediction[,1]
prediction <- as.numeric(prediction)
prediction
class(prediction)
prediction <- sapply(df_split[1:12],makepredictions)
prediction
start_time <- Sys.time()
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
prediction <- sapply(df_split[1:10],makepredictions)
end_time <- Sys.time()
end_time - start_time
a <- lapply(c(2,3,4),function(x){2*x})
a
a <- sapply(c(2,3,4),function(x){2*x})
a
df_sub
ggplot(df_monthly, aes(x=date,y=sales)) + geom_line()
library(xts)
# require() gives a warning message and returns FALSE if the requested package is not found
# load al the necessary libraries with pacman
pacman::p_load(tidyverse,
lubridate,
ggplot2,
ggfortify,
scales,
forecast,
plotly,
reshape,
prophet,
xts,
imputeTS # used to replace na's in time series data
)
?split
library(tidyverse)
library(tidyverse)
library(data.table)
df_prophet_to_split_train <- df_prophet_to_split[df_prophet_to_split$ds < "2017-01-01"]
df_prophet_to_split_train <- df_prophet_to_split[,df_prophet_to_split$ds < "2017-01-01"]
df_prophet_to_split$ds < "2017-01-01"
df_prophet_to_split[,df_prophet_to_split$ds < "2017-01-01"]
?subset
subset(df_prophet_to_split, ds >= "2018-01-01")
subset(df_prophet_to_split, df_prophet_to_split$ds >= "2018-01-01")
subset(df_prophet_to_split, $ds >= "2018-01-01", select = c('ds','y'))
subset(df_prophet_to_split, ds >= "2018-01-01", select = c('ds','y'))
subset(df_prophet_to_split, ds >= "2017-01-01", select = c('ds','y'))
head(subset(df_prophet_to_split, ds >= "2017-01-01", select = c('ds','y')))
head(subset(df_prophet_to_split, ds >= "2017-01-01"))
df_prophet_to_split <- df_train
df_prophet_to_split$date <- as.POSIXct(df_prophet_to_split$date, "%Y-%m-%d")
names(df_prophet_to_split) <- c('ds','store','item','y')
head(df_prophet_to_split)
head(subset(df_prophet_to_split, ds >= "2017-01-01"))
df_prophet_to_split_train <- subset(df_prophet_to_split, ds < "2017-01-01")
df_prophet_to_split_test <- subset(df_prophet_to_split, ds >= "2017-01-01")
df_split_train <- split(as.data.table(df_prophet_to_split_train),by=c('store','item'),keep.by = FALSE)
df_split_train <- split(as.data.table(df_prophet_to_split_test),by=c('store','item'),keep.by = FALSE)
makepredictions <- function(df_prophet)
{
m <- prophet(df_prophet, daily.seasonality=TRUE)
future <- make_future_dataframe(m, periods=90)
forecast <- predict(m, future)
xts::last(forecast[, c("yhat")],90)
}
prediction <- sapply(df_split_train[1:10],makepredictions)
prediction
plot(prediction)
makepredictions <- function(df_prophet)
{
m <- prophet(df_prophet, daily.seasonality=TRUE, yearly.seasonality = TRUE)
future <- make_future_dataframe(m, periods=90)
forecast <- predict(m, future)
xts::last(forecast[, c("yhat")],90)
}
prediction <- sapply(df_split_train[1:10],makepredictions)
prediction
plot(prediction)
makepredictions <- function(df_prophet)
{
m <- prophet(df_prophet, daily.seasonality=TRUE, yearly.seasonality = TRUE)
future <- make_future_dataframe(m, periods=365)
forecast <- predict(m, future)
xts::last(forecast[, c("yhat")],365)
print('a')
}
prediction <- sapply(df_split_train[1:10],makepredictions)
plot(prediction)
prediction
makepredictions <- function(df_prophet)
{
m <- prophet(df_prophet, daily.seasonality=TRUE, yearly.seasonality = TRUE)
future <- make_future_dataframe(m, periods=365)
forecast <- predict(m, future)
print('a')
xts::last(forecast[, c("yhat")],365)
}
prediction <- sapply(df_split_train[1:10],makepredictions)
prediction
plot(prediction)
plot(prediction[1])
plot(prediction[[1])
plot(prediction[[1]])
prediction[1]
prediction[,1]
plot(prediction[,1])
# Load libraries ####
if(require("pacman")=="FALSE"){
install.packages("pacman")
}
# require() gives a warning message and returns FALSE if the requested package is not found
# load al the necessary libraries with pacman
pacman::p_load(tidyverse,
lubridate,
ggplot2,
ggfortify,
scales,
forecast,
plotly,
reshape,
prophet,
xts,
data.table,
imputeTS # used to replace na's in time series data
)
makepredictions <- function(df_prophet)
{
m <- prophet(df_prophet, daily.seasonality=TRUE, yearly.seasonality = TRUE)
future <- make_future_dataframe(m, periods=365)
forecast <- predict(m, future)
print('a')
xts::last(forecast[, c("yhat")],365)
}
plot(prediction[,1])
prediction[,1]
prediction
df_split_test[1:10]
df_split_train <- split(as.data.table(df_prophet_to_split_train),by=c('store','item'),keep.by = FALSE)
df_split_test <- split(as.data.table(df_prophet_to_split_test),by=c('store','item'),keep.by = FALSE)
makepredictions <- function(df_prophet)
{
m <- prophet(df_prophet, daily.seasonality=TRUE, yearly.seasonality = TRUE)
future <- make_future_dataframe(m, periods=365)
forecast <- predict(m, future)
print('a')
xts::last(forecast[, c("yhat")],365)
}
prediction <- sapply(df_split_train[1:10],makepredictions)
prediction
plot(prediction)
plot(prediction[,1])
View(prediction)
plot(prediction[1,])
prediction[1,]
prediction[,1]
plot(prediction[,1])
makepredictions <- function(df_prophet,iter)
{
m <- prophet(df_prophet, daily.seasonality=TRUE, yearly.seasonality = TRUE)
future <- make_future_dataframe(m, periods=365)
forecast <- predict(m, future)
print('iter')
xts::last(forecast[, c("yhat")],365)
}
prediction <- sapply(df_split_train[1:10],makepredictions,iter=seq(10))
makepredictions <- function(df_prophet,iter)
{
m <- prophet(df_prophet, daily.seasonality=TRUE, yearly.seasonality = TRUE)
future <- make_future_dataframe(m, periods=365)
forecast <- predict(m, future)
print(iter)
xts::last(forecast[, c("yhat")],365)
}
prediction <- sapply(df_split_train[1:10],makepredictions,iter=seq(10))
makepredictions <- function(df_prophet,iter)
{
m <- prophet(df_prophet, daily.seasonality=TRUE, yearly.seasonality = TRUE)
future <- make_future_dataframe(m, periods=365)
forecast <- predict(m, future)
print(iter)
iter <<- iter + 1
xts::last(forecast[, c("yhat")],365)
}
i <- 1
prediction <- sapply(df_split_train[1:10],makepredictions,iter=i)
makepredictions <- function(df_prophet)
{
m <- prophet(df_prophet, daily.seasonality=TRUE, yearly.seasonality = TRUE)
future <- make_future_dataframe(m, periods=365)
forecast <- predict(m, future)
print(iter)
i <<- i + 1
xts::last(forecast[, c("yhat")],365)
}
i <- 1
makepredictions <- function(df_prophet)
{
m <- prophet(df_prophet, daily.seasonality=TRUE, yearly.seasonality = TRUE)
future <- make_future_dataframe(m, periods=365)
forecast <- predict(m, future)
print(i)
i <<- i + 1
xts::last(forecast[, c("yhat")],365)
}
prediction <- sapply(df_split_train[1:10],makepredictions)
df_split_test
makepredictions <- function(df_prophet)
{
m <- prophet(df_prophet, daily.seasonality=TRUE)
future <- make_future_dataframe(m, periods=90)
forecast <- predict(m, future)
print(i)
i <<- i + 1
xts::last(forecast[, c("yhat")],90)
}
start_time <- Sys.time()
i <- 1
prediction <- sapply(df_split[1:10],makepredictions)
end_time <- Sys.time()
end_time - start_time
cv <- cross_validation(m,365,'days')
met <- performance_metrics(cv)
met
df_prophet_to_split <- df_train
df_prophet_to_split$date <- as.POSIXct(df_prophet_to_split$date, "%Y-%m-%d")
names(df_prophet_to_split) <- c('ds','store','item','y')
df_split <- split(as.data.table(df_prophet_to_split),by=c('store','item'),keep.by = FALSE)
df_prophet_to_split <- df_train
df_prophet_to_split$date <- as.POSIXct(df_prophet_to_split$date, "%Y-%m-%d")
names(df_prophet_to_split) <- c('ds','store','item','y')
df_split <- split(as.data.table(df_prophet_to_split),by=c('store','item'),keep.by = FALSE)
df_split
makepredictions <- function(df_prophet)
{
m <- prophet(df_prophet, daily.seasonality=TRUE)
future <- make_future_dataframe(m, periods=90)
forecast <- predict(m, future)
print(i)
i <<- i + 1
xts::last(forecast[, c("yhat")],90)
}
start_time <- Sys.time()
i <- 1
prediction <- sapply(df_split[1:10],makepredictions)
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
i <- 1
prediction <- sapply(df_split,makepredictions)
end_time <- Sys.time()
end_time - start_time
length(as.numeric(prediction))
View(df_sub)
df_sub$sales <- as.numeric(prediction)
View(df_sub)
write.csv(df_sub, "data/submission.csv", row.names=FALSE)
df_prophet_to_split <- df_train
df_prophet_to_split$date <- as.POSIXct(df_prophet_to_split$date, "%Y-%m-%d")
names(df_prophet_to_split) <- c('ds','store','item','y')
# LOG
df_prophet_to_split$y <- log10(1+df_prophet_to_split$y)
# LOG
df_split <- split(as.data.table(df_prophet_to_split),by=c('store','item'),keep.by = FALSE)
makepredictions <- function(df_prophet)
{
m <- prophet(df_prophet, daily.seasonality=TRUE)
future <- make_future_dataframe(m, periods=90)
forecast <- predict(m, future)
print(i)
i <<- i + 1
xts::last(forecast[, c("yhat")],90)
}
df_split
start_time <- Sys.time()
i <- 1
#prediction <- sapply(df_split,makepredictions)
logprediction <- sapply(df_split,makepredictions)
end_time <- Sys.time()
end_time - start_time
logprediction
View(logprediction)
# LOG
logprediction <- 10^logprediction - 1
df_sub$sales <- as.numeric(logpredictions)
df_sub$sales <- as.numeric(logprediction)
write.csv(df_sub, "data/submission2.csv", row.names=FALSE)
# Load libraries ####
if(require("pacman")=="FALSE"){
install.packages("pacman")
}
# require() gives a warning message and returns FALSE if the requested package is not found
# load al the necessary libraries with pacman
pacman::p_load(tidyverse,
lubridate,
ggplot2,
ggfortify,
scales,
forecast,
plotly,
reshape,
prophet,
xts,
data.table,
imputeTS # used to replace na's in time series data
)
logprediction
dim(logprediction)
class(logprediction)
class(as_data_frame(logprediction))
class(as_tibble(logprediction))
head(as_tibble(logprediction))
hist(logprediction)
